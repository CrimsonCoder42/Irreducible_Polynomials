B <<- matrix(c(0,1,-1,0), nrow=2,ncol=2,byrow = TRUE)
fval <- sapply(-1:1,Transform,A=B); fval
fval <- sapply(-1:1,Transform,A=A); fval
Transform <- function(A,idx){
m <- makeVecListinZ3()
v <- m[3*idx-2,]
x <- ActOnVectorZ3(A,v)
r <- row.match(x,m)
return((r+2)%/%3)      #integer divide
}
fval <- sapply(-1:1,Transform,A=A); fval
fval <- sapply(-1:1,Transform,A=B); fval
#Matrix and vector calculations in Z5
#These functions use -1 and -2 aas names instead of 4 and 3
Z5Sum <- function(a,b){
s <-(a+b)%%5
if (s > 2) s <- s-5
return (s)
}
#Matrix and vector calculations in Z5
#These functions use -1 and -2 aas names instead of 4 and 3
Z5Sum <- function(a,b){
s <-(a+b)%%5
if (s > 2) s <- s-5
return (s)
}
Z5Sum(4,4)
#Matrix and vector calculations in Z5
#These functions use -1 and -2 aas names instead of 4 and 3
Z5Sum <- function(a,b){
s <-(a+b)%%5
# if (s > 2) s <- s-5
return (s)
}
Z5Sum(4,4)
Z3Sum <- function(a,b) {
s <- (a+b)%%3
if (s > 1) s <- s-3
return(s)
}
Z3Prod <- function(a,b) {
p <- (a*b)%%3
if (p > 1) p <- p-3
return(p)
}
makeVecListinZ3 <- function() {
m <- matrix(ncol = 2, nrow = 9)
m[1,] <- 1
m[2,] <- 0
m[3,] <- -1
m[4,] <- 0
m[5,] <- 0
m[6,] <- 0
m[7,] <- -1
m[8,] <- 0
m[9,] <- 1
return (m)
}
makeVecListinZ3()
ActOnVectorZ3 <- function(A,v) {
return(vF4Sum(vZ3Prod(v[1],A[,1]),vZ3Prod(v[2],A[,2])))
}
Transform <- function(A,idx){
m <- makeVecListinZ3()
v <- m[3*idx-2,]
x <- ActOnVectorZ3(A,v)
r <- row.match(x,m)
return((r+2)%/%3)      #integer divide
}
A <<- matrix(c(1,-1,1,1), nrow=2,ncol=2,byrow = TRUE)
B <<- matrix(c(0,1,-1,0), nrow=2,ncol=2,byrow = TRUE)
fval <- sapply(-1:1,Transform,A=B); fval
makeVecListinZ3 <- function() {
m <- matrix(ncol = 2, nrow = 9)
m[1,] <- 1
m[2,] <- 0
m[3,] <- -1
m[4,] <- 0
m[5,] <- 0
m[6,] <- 0
m[7,] <- -1
m[8,] <- 0
m[9,] <- 1
return (m)
}
makeVecListinZ3()
runApp()
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
Z5Prod <- function(a,b){
s <-(a*b)%%5
if (s > 2) s <- s-5
return (s)
}
Z3Prod <- function(a,b) {
p <- (a*b)%%3
if (p > 1) p <- p-3
return(p)
}
# Z3 Vectorize Functions
vZ3Sum <- Vectorize(Z3Sum, c("a","b"));vZ3Sum
vZ3Prod <- Vectorize(Z3Prod, c("a","b"));vZ3Prod
#These vectorized functions make it possible
#to multiply a matrix or a vector by a constant
vZ5Sum <- Vectorize(Z5Sum,c("a","b"));vZ5Sum
vZ5Prod <- Vectorize(Z5Prod,c("a","b"));vZ5Prod
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
A <- Z5CreateMatrix(1,0)
A <- Z5CreateMatrix(1,0);A
A <- Z5CreateMatrix(1,0);A
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/SL_F4_export')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
#5 rows for each of the 6 subspaces -- permits easy lookup
makeVecList <- function() {
m <- matrix(ncol = 2, nrow = 30)
v <- c(1,0)
m[1,] <- vZ5Prod(0,v)
m[2,] <- vZ5Prod(1,v)
m[3,] <- vZ5Prod(2,v)
m[4,] <- vZ5Prod(-2,v)
m[5,] <- vZ5Prod(-1,v)
v <- c(0,1)
m[6,] <- vZ5Prod(0,v)
m[7,] <- vZ5Prod(1,v)
m[8,] <- vZ5Prod(2,v)
m[9,] <- vZ5Prod(-2,v)
m[10,] <- vZ5Prod(-1,v)
v <- c(1,1)
m[11,] <- vZ5Prod(0,v)
m[12,] <- vZ5Prod(1,v)
m[13,] <- vZ5Prod(2,v)
m[14,] <- vZ5Prod(-2,v)
m[15,] <- vZ5Prod(-1,v)
v <- c(1,2)
m[16,] <- vZ5Prod(0,v)
m[17,] <- vZ5Prod(1,v)
m[18,] <- vZ5Prod(2,v)
m[19,] <- vZ5Prod(-2,v)
m[20,] <- vZ5Prod(-1,v)
v <- c(1,-2)
m[21,] <- vZ5Prod(0,v)
m[22,] <- vZ5Prod(1,v)
m[23,] <- vZ5Prod(2,v)
m[24,] <- vZ5Prod(-2,v)
m[25,] <- vZ5Prod(-1,v)
v <- c(1,-1)
m[26,] <- vZ5Prod(0,v)
m[27,] <- vZ5Prod(1,v)
m[28,] <- vZ5Prod(2,v)
m[29,] <- vZ5Prod(-2,v)
m[30,] <- vZ5Prod(-1,v)
return (m)
}
makeVecList()
makeVecListinZ3 <- function() {
m <- matrix(ncol = 2, nrow = 9)
m[1,] <- 1
m[2,] <- 0
m[3,] <- -1
m[4,] <- 0
m[5,] <- 0
m[6,] <- 0
m[7,] <- -1
m[8,] <- 0
m[9,] <- 1
return (m)
}
makeVecListinZ3()
Z3CreateMatrix <- function(det,trc){
elements <- c(0,1,-1)
#generate random top left entry
a11 <- as.numeric(sample(elements,1))
#make the trace correct
a22 <- Z3Sum(-a11,trc)
#choose a random nonzero element
b1 <- sample(elements[-1,1],1)   #nonzero
#Required product for the off-diagonal elements
offDiag <- Z3Sum(-det,Z3Prod(a11,a22))    #could be zero
#Multiply it by the inverse of the known element
b2 <- Z3Prod(offDiag,Z5Inv(b1))     #could be zero
#The following makes it possible to have a zero in either off-diagonal position
if (sample(2,1)==1)
return (matrix(c(a11,b1,b2,a22),2))
return (matrix(c(a11,b2,b1,a22),2))
}
A <- Z5CreateMatrix(1,0);A
fval <- sapply(1:6,TransforminZ3,A=A); fval
Z3Prod(-1,0)
TransforminZ3 <- function(A,idx){
m <- makeVecListinZ3()
v <- m[3*idx-3,]   #second vector (first nonzero one) in subspace idx
x <- vZ3Sum(vZ3Prod(v[1],A[,1]),vZ3Prod(v[2],A[,2]))
#Find what row in matrix m amatches vector v
r <- row.match(x,m)
return(floor((r+4)/5))
}
fval <- sapply(1:6,TransforminZ3,A=A); fval
Z3Prod <- function(a,b) {
p <-(a*b)%%3
if (p > 1) {
p <- p-3
}
return(p)
}
Z3Prod(-1,0)
TransforminZ3 <- function(A,idx){
m <- makeVecListinZ3()
v <- m[3*idx-3,]   #second vector (first nonzero one) in subspace idx
x <- vZ3Sum(vZ3Prod(v[1],A[,1]),vZ3Prod(v[2],A[,2]))
#Find what row in matrix m amatches vector v
r <- row.match(x,m)
return(floor((r+4)/5))
}
fval <- sapply(1:6,TransforminZ3,A=A); fval
Z3Prod <- function(a,b) {
pr <-(a*b)%%3
if (pr > 1) {
pr <- pr-3
}
return(pr)
}
Z3Prod(-1,0)
vZ3Prod <- Vectorize(Z3Prod, c("a","b"));vZ3Prod
TransforminZ3 <- function(A,idx){
m <- makeVecListinZ3()
v <- m[3*idx-3,]   #second vector (first nonzero one) in subspace idx
x <- vZ3Sum(vZ3Prod(v[1],A[,1]),vZ3Prod(v[2],A[,2]))
#Find what row in matrix m amatches vector v
r <- row.match(x,m)
return(floor((r+4)/5))
}
fval <- sapply(1:6,TransforminZ3,A=A); fval
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
setwd("~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3")
runApp()
install.packages("matlib")
runApp()
A <<- matrix(c(1,2,1,1), nrow=2,ncol=2,byrow = TRUE)
inv <- solve(A); inv
A <<- matrix(c(1,2,1,1), nrow=2,ncol=2,byrow = TRUE)
A <<- matrix(c(1,2,1,1), nrow=2,ncol=2,byrow = TRUE);A
inv <- solve(A)%%3; inv
A <<- matrix(c(1,2,1,1), nrow=2,ncol=2,byrow = TRUE);A
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z5_export')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3')
setwd("~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/GL_Z3")
runApp()
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/IsoF4_HW')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/IsoF4_HW')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/IsoF4_HW')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/IsoF4_HW')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/IsoF4_HW')
setwd("~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/IsoF4_HW")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
A <<- F4CreateMatrix("x");A
fval <- sapply(1:6,Transform,A=A)
Transform <- function(A,idx){
m <- makeVecList()
v <- m[3*idx-2,]
x <- ActOnVector(A,v)
r <- row.match(x,m)
return((r+2)%/%3)      #integer divide
}
A <<- F4CreateMatrix("x");A
fval <- sapply(1:6,Transform,A=A)
ActOnVector <- function(A,v){
return(vF4Sum(vF4Prod(v[1],A[,1]),vF4Prod(v[2],A[,2])))
}
Transform <- function(A,idx){
m <- makeVecList()
v <- m[3*idx-2,]
x <- ActOnVector(A,v)
r <- row.match(x,m)
return((r+2)%/%3)      #integer divide
}
F4CreateMatrix <- function(trc){
elements <- c("0","1","x","x+1")
a11 <- sample(elements,1)
a22 <- F4Sum(a11,trc)
b1 <- sample(elements[2:4],1)   #nonzero
#Required product for the off-diagonal elements
offDiag <- F4Sum("1",F4Prod(a11,a22))
#Multiply it by the inverse of the known element
b2 <- F4Prod(offDiag,F4Inv(b1))
#The following makes it possible to have a zero in either off-diagonal position
if (sample(2,1)==1)
return (matrix(c(a11,b1,b2,a22),2))
return (matrix(c(a11,b2,b1,a22),2))
}
makeVecList <- function() {
m <- matrix(ncol = 2, nrow = 15)
v <- c("1","0")
m[1,] <- vF4Prod("1",v)
m[2,] <- vF4Prod("x",v)
m[3,] <- vF4Prod("x+1",v)
v <- c("0","1")
m[4,] <- vF4Prod("1",v)
m[5,] <- vF4Prod("x",v)
m[6,] <- vF4Prod("x+1",v)
v <- c("1","1")
m[7,] <- vF4Prod("1",v)
m[8,] <- vF4Prod("x",v)
m[9,] <- vF4Prod("x+1",v)
v <- c("1","x")
m[10,] <- vF4Prod("1",v)
m[11,] <- vF4Prod("x",v)
m[12,] <- vF4Prod("x+1",v)
v <- c("1","x+1")
m[13,] <- vF4Prod("1",v)
m[14,] <- vF4Prod("x",v)
m[15,] <- vF4Prod("x+1",v)
return (m)
}
Transform <- function(A,idx){
m <- makeVecList()
v <- m[3*idx-2,]
x <- ActOnVector(A,v)
r <- row.match(x,m)
return((r+2)%/%3)      #integer divide
}
A <<- F4CreateMatrix("x");A
#Matrix and vector calculations in F4
F4Sum <- function(a,b){
if (a == "0") return (b)
if (b == "0") return (a)
if (a == b) return ("0")
if ((a == "1") && (b == "x")) return("x+1")
if ((b == "1") && (a == "x")) return("x+1")
if ((a == "1") && (b == "x+1")) return("x")
if ((b == "1") && (a == "x+1")) return("x")
return("1")
}
F4Prod <- function(a,b){
if (a == "0") return (0)
if (b == "0") return (0)
if (a == "1") return (b)
if (b == "1") return (a)
if ((a == "x") && (b == "x")) return("x+1")
if ((a == "x+1") && (b == "x+1")) return("x")
return("1")
}
F4Inv <- function(a){
validate(need(a != "0", "Cannot divide by zero"))
if (a == "1") return("1")
if (a == "x") return("x+1")
if (a == "x+1") return("x")
}
vF4Sum <- Vectorize(F4Sum,c("a","b"))
vF4Prod <- Vectorize(F4Prod,c("a","b"))
makeVecList <- function() {
m <- matrix(ncol = 2, nrow = 15)
v <- c("1","0")
m[1,] <- vF4Prod("1",v)
m[2,] <- vF4Prod("x",v)
m[3,] <- vF4Prod("x+1",v)
v <- c("0","1")
m[4,] <- vF4Prod("1",v)
m[5,] <- vF4Prod("x",v)
m[6,] <- vF4Prod("x+1",v)
v <- c("1","1")
m[7,] <- vF4Prod("1",v)
m[8,] <- vF4Prod("x",v)
m[9,] <- vF4Prod("x+1",v)
v <- c("1","x")
m[10,] <- vF4Prod("1",v)
m[11,] <- vF4Prod("x",v)
m[12,] <- vF4Prod("x+1",v)
v <- c("1","x+1")
m[13,] <- vF4Prod("1",v)
m[14,] <- vF4Prod("x",v)
m[15,] <- vF4Prod("x+1",v)
return (m)
}
F4CreateMatrix <- function(trc){
elements <- c("0","1","x","x+1")
a11 <- sample(elements,1)
a22 <- F4Sum(a11,trc)
b1 <- sample(elements[2:4],1)   #nonzero
#Required product for the off-diagonal elements
offDiag <- F4Sum("1",F4Prod(a11,a22))
#Multiply it by the inverse of the known element
b2 <- F4Prod(offDiag,F4Inv(b1))
#The following makes it possible to have a zero in either off-diagonal position
if (sample(2,1)==1)
return (matrix(c(a11,b1,b2,a22),2))
return (matrix(c(a11,b2,b1,a22),2))
}
ActOnVector <- function(A,v){
return(vF4Sum(vF4Prod(v[1],A[,1]),vF4Prod(v[2],A[,2])))
}
Transform <- function(A,idx){
m <- makeVecList()
v <- m[3*idx-2,]
x <- ActOnVector(A,v)
r <- row.match(x,m)
return((r+2)%/%3)      #integer divide
}
F4MatProd <- function(A,B) {
v1 <- B[,1]
x1 <- vF4Sum(vF4Prod(v1[1],A[,1]),vF4Prod(v1[2],A[,2]))
v2 <- B[,2]
x2 <- vF4Sum(vF4Prod(v2[1],A[,1]),vF4Prod(v2[2],A[,2]))
return(cbind(x1,x2))
}
F4Det <- function(A) {
F4Sum(F4Prod(A[1,1],A[2,2]),F4Prod(A[1,2],A[2,1]))
}
A <<- F4CreateMatrix("x");A
fval <- sapply(1:6,Transform,A=A)
test <- Transform(A,1);test
test <- Transform(A,5);test
test <- Transform(A,6);test
fval <- sapply(1:5,Transform,A=A)
fval <- sapply(1:5,Transform,A=A);fval
A <<- F4CreateMatrix("x");A
runApp()
runApp()
setwd("~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 9/IsoF4_HW")
runApp()
test <- Transform(A,6);test
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 4/PermutePartial')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/MM_Z_3')
runApp('~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/Poly')
setwd("~/Desktop/Math E-151 Classic Mathematics/Dashboard/Class 8/Poly")
runApp()
runApp()
runApp()
